import {
  require_react
} from "./chunk-ZVMIEU5R.js";
import {
  disableExperimentalFragmentVariables,
  disableFragmentWarnings,
  enableExperimentalFragmentVariables,
  gql,
  resetCaches
} from "./chunk-4N66DY7Z.js";
import {
  ApolloCache,
  ApolloClient,
  ApolloError,
  ApolloLink,
  Cache,
  DocumentTransform,
  HttpLink,
  InMemoryCache,
  MissingFieldError,
  NetworkStatus,
  Observable,
  ObservableQuery,
  Trie,
  __assign,
  __rest,
  __spreadArray,
  canUseLayoutEffect,
  canUseSymbol,
  canUseWeakMap,
  canonicalStringify,
  checkFetcher,
  compact,
  concat,
  createFulfilledPromise,
  createHttpLink,
  createRejectedPromise,
  createSignalIfSupported,
  defaultDataIdFromObject,
  defaultPrinter,
  empty,
  equal,
  execute,
  fallbackHttpConfig,
  from,
  fromError,
  fromPromise,
  invariant,
  isApolloError,
  isNetworkRequestSettled,
  isNonEmptyArray,
  isReference,
  makeReference,
  makeVar,
  maybeDeepFreeze,
  mergeDeepArray,
  mergeOptions,
  parseAndCheckHttpResponse,
  rewriteURIForGET,
  selectHttpOptionsAndBody,
  selectHttpOptionsAndBodyInternal,
  selectURI,
  serializeFetchParameter,
  setVerbosity,
  split,
  throwServerError,
  toPromise,
  wrapPromiseWithState
} from "./chunk-OKASDZWK.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/@apollo/client/react/context/ApolloConsumer.js
var React2 = __toESM(require_react(), 1);

// node_modules/@apollo/client/react/context/ApolloContext.js
var React = __toESM(require_react(), 1);
var contextKey = canUseSymbol ? Symbol.for("__APOLLO_CONTEXT__") : "__APOLLO_CONTEXT__";
function getApolloContext() {
  invariant("createContext" in React, 45);
  var context = React.createContext[contextKey];
  if (!context) {
    Object.defineProperty(React.createContext, contextKey, {
      value: context = React.createContext({}),
      enumerable: false,
      writable: false,
      configurable: true
    });
    context.displayName = "ApolloContext";
  }
  return context;
}
var resetApolloContext = getApolloContext;

// node_modules/@apollo/client/react/context/ApolloConsumer.js
var ApolloConsumer = function(props) {
  var ApolloContext = getApolloContext();
  return React2.createElement(ApolloContext.Consumer, null, function(context) {
    invariant(context && context.client, 44);
    return props.children(context.client);
  });
};

// node_modules/@apollo/client/react/context/ApolloProvider.js
var React3 = __toESM(require_react(), 1);
var ApolloProvider = function(_a) {
  var client = _a.client, children = _a.children;
  var ApolloContext = getApolloContext();
  var parentContext = React3.useContext(ApolloContext);
  var context = React3.useMemo(function() {
    return __assign(__assign({}, parentContext), { client: client || parentContext.client });
  }, [parentContext, client]);
  invariant(context.client, 46);
  return React3.createElement(ApolloContext.Provider, { value: context }, children);
};

// node_modules/@apollo/client/react/hooks/useApolloClient.js
var React4 = __toESM(require_react(), 1);
function useApolloClient(override) {
  var context = React4.useContext(getApolloContext());
  var client = override || context.client;
  invariant(!!client, 49);
  return client;
}

// node_modules/@apollo/client/react/hooks/useLazyQuery.js
var React7 = __toESM(require_react(), 1);

// node_modules/@apollo/client/react/hooks/useQuery.js
var React6 = __toESM(require_react(), 1);

// node_modules/@apollo/client/react/hooks/useSyncExternalStore.js
var React5 = __toESM(require_react(), 1);
var didWarnUncachedGetSnapshot = false;
var uSESKey = "useSyncExternalStore";
var realHook = React5[uSESKey];
var useSyncExternalStore = realHook || function(subscribe, getSnapshot, getServerSnapshot) {
  var value = getSnapshot();
  if (globalThis.__DEV__ !== false && !didWarnUncachedGetSnapshot && value !== getSnapshot()) {
    didWarnUncachedGetSnapshot = true;
    globalThis.__DEV__ !== false && invariant.error(58);
  }
  var _a = React5.useState({
    inst: { value, getSnapshot }
  }), inst = _a[0].inst, forceUpdate = _a[1];
  if (canUseLayoutEffect) {
    React5.useLayoutEffect(function() {
      Object.assign(inst, { value, getSnapshot });
      if (checkIfSnapshotChanged(inst)) {
        forceUpdate({ inst });
      }
    }, [subscribe, value, getSnapshot]);
  } else {
    Object.assign(inst, { value, getSnapshot });
  }
  React5.useEffect(function() {
    if (checkIfSnapshotChanged(inst)) {
      forceUpdate({ inst });
    }
    return subscribe(function handleStoreChange() {
      if (checkIfSnapshotChanged(inst)) {
        forceUpdate({ inst });
      }
    });
  }, [subscribe]);
  return value;
};
function checkIfSnapshotChanged(_a) {
  var value = _a.value, getSnapshot = _a.getSnapshot;
  try {
    return value !== getSnapshot();
  } catch (_b) {
    return true;
  }
}

// node_modules/@apollo/client/react/parser/index.js
var DocumentType;
(function(DocumentType2) {
  DocumentType2[DocumentType2["Query"] = 0] = "Query";
  DocumentType2[DocumentType2["Mutation"] = 1] = "Mutation";
  DocumentType2[DocumentType2["Subscription"] = 2] = "Subscription";
})(DocumentType || (DocumentType = {}));
var cache = /* @__PURE__ */ new Map();
function operationName(type) {
  var name;
  switch (type) {
    case DocumentType.Query:
      name = "Query";
      break;
    case DocumentType.Mutation:
      name = "Mutation";
      break;
    case DocumentType.Subscription:
      name = "Subscription";
      break;
  }
  return name;
}
function parser(document) {
  var cached = cache.get(document);
  if (cached)
    return cached;
  var variables, type, name;
  invariant(!!document && !!document.kind, 59, document);
  var fragments = [];
  var queries = [];
  var mutations = [];
  var subscriptions = [];
  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {
    var x = _a[_i];
    if (x.kind === "FragmentDefinition") {
      fragments.push(x);
      continue;
    }
    if (x.kind === "OperationDefinition") {
      switch (x.operation) {
        case "query":
          queries.push(x);
          break;
        case "mutation":
          mutations.push(x);
          break;
        case "subscription":
          subscriptions.push(x);
          break;
      }
    }
  }
  invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 60);
  invariant(
    queries.length + mutations.length + subscriptions.length <= 1,
    61,
    document,
    queries.length,
    subscriptions.length,
    mutations.length
  );
  type = queries.length ? DocumentType.Query : DocumentType.Mutation;
  if (!queries.length && !mutations.length)
    type = DocumentType.Subscription;
  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;
  invariant(definitions.length === 1, 62, document, definitions.length);
  var definition = definitions[0];
  variables = definition.variableDefinitions || [];
  if (definition.name && definition.name.kind === "Name") {
    name = definition.name.value;
  } else {
    name = "data";
  }
  var payload = { name, type, variables };
  cache.set(document, payload);
  return payload;
}
function verifyDocumentType(document, type) {
  var operation = parser(document);
  var requiredOperationName = operationName(type);
  var usedOperationName = operationName(operation.type);
  invariant(
    operation.type === type,
    63,
    requiredOperationName,
    requiredOperationName,
    usedOperationName
  );
}

// node_modules/@apollo/client/react/hooks/useQuery.js
var hasOwnProperty = Object.prototype.hasOwnProperty;
function useQuery(query, options) {
  if (options === void 0) {
    options = /* @__PURE__ */ Object.create(null);
  }
  return useInternalState(useApolloClient(options.client), query).useQuery(options);
}
function useInternalState(client, query) {
  var stateRef = React6.useRef();
  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {
    stateRef.current = new InternalState(client, query, stateRef.current);
  }
  var state = stateRef.current;
  state.forceUpdateState = React6.useReducer(function(tick) {
    return tick + 1;
  }, 0)[1];
  return state;
}
var InternalState = function() {
  function InternalState2(client, query, previous) {
    var _this = this;
    this.client = client;
    this.query = query;
    this.forceUpdate = function() {
      return _this.forceUpdateState();
    };
    this.ssrDisabledResult = maybeDeepFreeze({
      loading: true,
      data: void 0,
      error: void 0,
      networkStatus: NetworkStatus.loading
    });
    this.skipStandbyResult = maybeDeepFreeze({
      loading: false,
      data: void 0,
      error: void 0,
      networkStatus: NetworkStatus.ready
    });
    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();
    verifyDocumentType(query, DocumentType.Query);
    var previousResult = previous && previous.result;
    var previousData = previousResult && previousResult.data;
    if (previousData) {
      this.previousData = previousData;
    }
  }
  InternalState2.prototype.forceUpdateState = function() {
    globalThis.__DEV__ !== false && invariant.warn(50);
  };
  InternalState2.prototype.executeQuery = function(options) {
    var _this = this;
    var _a;
    if (options.query) {
      Object.assign(this, { query: options.query });
    }
    this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);
    var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());
    this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;
    this.result = void 0;
    this.forceUpdate();
    return new Promise(function(resolve) {
      var result;
      concast.subscribe({
        next: function(value) {
          result = value;
        },
        error: function() {
          resolve(_this.toQueryResult(_this.observable.getCurrentResult()));
        },
        complete: function() {
          resolve(_this.toQueryResult(result));
        }
      });
    });
  };
  InternalState2.prototype.useQuery = function(options) {
    var _this = this;
    this.renderPromises = React6.useContext(getApolloContext()).renderPromises;
    this.useOptions(options);
    var obsQuery = this.useObservableQuery();
    var result = useSyncExternalStore(React6.useCallback(function(handleStoreChange) {
      if (_this.renderPromises) {
        return function() {
        };
      }
      _this.forceUpdate = handleStoreChange;
      var onNext = function() {
        var previousResult = _this.result;
        var result2 = obsQuery.getCurrentResult();
        if (previousResult && previousResult.loading === result2.loading && previousResult.networkStatus === result2.networkStatus && equal(previousResult.data, result2.data)) {
          return;
        }
        _this.setResult(result2);
      };
      var onError = function(error) {
        subscription.unsubscribe();
        subscription = obsQuery.resubscribeAfterError(onNext, onError);
        if (!hasOwnProperty.call(error, "graphQLErrors")) {
          throw error;
        }
        var previousResult = _this.result;
        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {
          _this.setResult({
            data: previousResult && previousResult.data,
            error,
            loading: false,
            networkStatus: NetworkStatus.error
          });
        }
      };
      var subscription = obsQuery.subscribe(onNext, onError);
      return function() {
        setTimeout(function() {
          return subscription.unsubscribe();
        });
        _this.forceUpdate = function() {
          return _this.forceUpdateState();
        };
      };
    }, [
      obsQuery,
      this.renderPromises,
      this.client.disableNetworkFetches
    ]), function() {
      return _this.getCurrentResult();
    }, function() {
      return _this.getCurrentResult();
    });
    this.unsafeHandlePartialRefetch(result);
    return this.toQueryResult(result);
  };
  InternalState2.prototype.useOptions = function(options) {
    var _a;
    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);
    var currentWatchQueryOptions = this.watchQueryOptions;
    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {
      this.watchQueryOptions = watchQueryOptions;
      if (currentWatchQueryOptions && this.observable) {
        this.observable.reobserve(this.getObsQueryOptions());
        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;
        this.result = void 0;
      }
    }
    this.onCompleted = options.onCompleted || InternalState2.prototype.onCompleted;
    this.onError = options.onError || InternalState2.prototype.onError;
    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {
      this.result = this.ssrDisabledResult;
    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === "standby") {
      this.result = this.skipStandbyResult;
    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {
      this.result = void 0;
    }
  };
  InternalState2.prototype.getObsQueryOptions = function() {
    var toMerge = [];
    var globalDefaults = this.client.defaultOptions.watchQuery;
    if (globalDefaults)
      toMerge.push(globalDefaults);
    if (this.queryHookOptions.defaultOptions) {
      toMerge.push(this.queryHookOptions.defaultOptions);
    }
    toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));
    return toMerge.reduce(mergeOptions);
  };
  InternalState2.prototype.createWatchQueryOptions = function(_a) {
    var _b;
    if (_a === void 0) {
      _a = {};
    }
    var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, otherOptions = __rest(_a, ["skip", "ssr", "onCompleted", "onError", "defaultOptions"]);
    var watchQueryOptions = Object.assign(otherOptions, { query: this.query });
    if (this.renderPromises && (watchQueryOptions.fetchPolicy === "network-only" || watchQueryOptions.fetchPolicy === "cache-and-network")) {
      watchQueryOptions.fetchPolicy = "cache-first";
    }
    if (!watchQueryOptions.variables) {
      watchQueryOptions.variables = {};
    }
    if (skip) {
      var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;
      Object.assign(watchQueryOptions, {
        initialFetchPolicy,
        fetchPolicy: "standby"
      });
    } else if (!watchQueryOptions.fetchPolicy) {
      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();
    }
    return watchQueryOptions;
  };
  InternalState2.prototype.getDefaultFetchPolicy = function() {
    var _a, _b;
    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || "cache-first";
  };
  InternalState2.prototype.onCompleted = function(data) {
  };
  InternalState2.prototype.onError = function(error) {
  };
  InternalState2.prototype.useObservableQuery = function() {
    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || this.client.watchQuery(this.getObsQueryOptions());
    this.obsQueryFields = React6.useMemo(function() {
      return {
        refetch: obsQuery.refetch.bind(obsQuery),
        reobserve: obsQuery.reobserve.bind(obsQuery),
        fetchMore: obsQuery.fetchMore.bind(obsQuery),
        updateQuery: obsQuery.updateQuery.bind(obsQuery),
        startPolling: obsQuery.startPolling.bind(obsQuery),
        stopPolling: obsQuery.stopPolling.bind(obsQuery),
        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)
      };
    }, [obsQuery]);
    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);
    if (this.renderPromises && ssrAllowed) {
      this.renderPromises.registerSSRObservable(obsQuery);
      if (obsQuery.getCurrentResult().loading) {
        this.renderPromises.addObservableQueryPromise(obsQuery);
      }
    }
    return obsQuery;
  };
  InternalState2.prototype.setResult = function(nextResult) {
    var previousResult = this.result;
    if (previousResult && previousResult.data) {
      this.previousData = previousResult.data;
    }
    this.result = nextResult;
    this.forceUpdate();
    this.handleErrorOrCompleted(nextResult, previousResult);
  };
  InternalState2.prototype.handleErrorOrCompleted = function(result, previousResult) {
    var _this = this;
    if (!result.loading) {
      var error_1 = this.toApolloError(result);
      Promise.resolve().then(function() {
        if (error_1) {
          _this.onError(error_1);
        } else if (result.data && (previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus) !== result.networkStatus && result.networkStatus === NetworkStatus.ready) {
          _this.onCompleted(result.data);
        }
      }).catch(function(error) {
        globalThis.__DEV__ !== false && invariant.warn(error);
      });
    }
  };
  InternalState2.prototype.toApolloError = function(result) {
    return isNonEmptyArray(result.errors) ? new ApolloError({ graphQLErrors: result.errors }) : result.error;
  };
  InternalState2.prototype.getCurrentResult = function() {
    if (!this.result) {
      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());
    }
    return this.result;
  };
  InternalState2.prototype.toQueryResult = function(result) {
    var queryResult = this.toQueryResultCache.get(result);
    if (queryResult)
      return queryResult;
    var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, ["data", "partial"]);
    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData }));
    if (!queryResult.error && isNonEmptyArray(result.errors)) {
      queryResult.error = new ApolloError({ graphQLErrors: result.errors });
    }
    return queryResult;
  };
  InternalState2.prototype.unsafeHandlePartialRefetch = function(result) {
    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== "cache-only") {
      Object.assign(result, {
        loading: true,
        networkStatus: NetworkStatus.refetch
      });
      this.observable.refetch();
    }
  };
  return InternalState2;
}();

// node_modules/@apollo/client/react/hooks/useLazyQuery.js
var EAGER_METHODS = [
  "refetch",
  "reobserve",
  "fetchMore",
  "updateQuery",
  "startPolling",
  "subscribeToMore"
];
function useLazyQuery(query, options) {
  var _a;
  var execOptionsRef = React7.useRef();
  var optionsRef = React7.useRef();
  var queryRef = React7.useRef();
  var merged = mergeOptions(options, execOptionsRef.current || {});
  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;
  optionsRef.current = merged;
  queryRef.current = document;
  var internalState = useInternalState(useApolloClient(options && options.client), document);
  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), { skip: !execOptionsRef.current }));
  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();
  var result = Object.assign(useQueryResult, {
    called: !!execOptionsRef.current
  });
  var eagerMethods = React7.useMemo(function() {
    var eagerMethods2 = {};
    var _loop_1 = function(key2) {
      var method = result[key2];
      eagerMethods2[key2] = function() {
        if (!execOptionsRef.current) {
          execOptionsRef.current = /* @__PURE__ */ Object.create(null);
          internalState.forceUpdateState();
        }
        return method.apply(this, arguments);
      };
    };
    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {
      var key = EAGER_METHODS_1[_i];
      _loop_1(key);
    }
    return eagerMethods2;
  }, []);
  Object.assign(result, eagerMethods);
  var execute2 = React7.useCallback(function(executeOptions) {
    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {
      fetchPolicy: initialFetchPolicy
    };
    var options2 = mergeOptions(optionsRef.current, __assign({ query: queryRef.current }, execOptionsRef.current));
    var promise = internalState.executeQuery(__assign(__assign({}, options2), { skip: false })).then(function(queryResult) {
      return Object.assign(queryResult, eagerMethods);
    });
    promise.catch(function() {
    });
    return promise;
  }, []);
  return [execute2, result];
}

// node_modules/@apollo/client/react/hooks/useMutation.js
var React8 = __toESM(require_react(), 1);
function useMutation(mutation, options) {
  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);
  verifyDocumentType(mutation, DocumentType.Mutation);
  var _a = React8.useState({
    called: false,
    loading: false,
    client
  }), result = _a[0], setResult = _a[1];
  var ref = React8.useRef({
    result,
    mutationId: 0,
    isMounted: true,
    client,
    mutation,
    options
  });
  {
    Object.assign(ref.current, { client, options, mutation });
  }
  var execute2 = React8.useCallback(function(executeOptions) {
    if (executeOptions === void 0) {
      executeOptions = {};
    }
    var _a2 = ref.current, options2 = _a2.options, mutation2 = _a2.mutation;
    var baseOptions = __assign(__assign({}, options2), { mutation: mutation2 });
    var client2 = executeOptions.client || ref.current.client;
    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {
      setResult(ref.current.result = {
        loading: true,
        error: void 0,
        data: void 0,
        called: true,
        client: client2
      });
    }
    var mutationId = ++ref.current.mutationId;
    var clientOptions = mergeOptions(baseOptions, executeOptions);
    return client2.mutate(clientOptions).then(function(response) {
      var _a3, _b;
      var data = response.data, errors = response.errors;
      var error = errors && errors.length > 0 ? new ApolloError({ graphQLErrors: errors }) : void 0;
      var onError = executeOptions.onError || ((_a3 = ref.current.options) === null || _a3 === void 0 ? void 0 : _a3.onError);
      if (error && onError) {
        onError(error, clientOptions);
      }
      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {
        var result_1 = {
          called: true,
          loading: false,
          data,
          error,
          client: client2
        };
        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {
          setResult(ref.current.result = result_1);
        }
      }
      var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);
      if (!error) {
        onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);
      }
      return response;
    }).catch(function(error) {
      var _a3;
      if (mutationId === ref.current.mutationId && ref.current.isMounted) {
        var result_2 = {
          loading: false,
          error,
          data: void 0,
          called: true,
          client: client2
        };
        if (!equal(ref.current.result, result_2)) {
          setResult(ref.current.result = result_2);
        }
      }
      var onError = executeOptions.onError || ((_a3 = ref.current.options) === null || _a3 === void 0 ? void 0 : _a3.onError);
      if (onError) {
        onError(error, clientOptions);
        return { data: void 0, errors: error };
      }
      throw error;
    });
  }, []);
  var reset = React8.useCallback(function() {
    if (ref.current.isMounted) {
      setResult({ called: false, loading: false, client });
    }
  }, []);
  React8.useEffect(function() {
    ref.current.isMounted = true;
    return function() {
      ref.current.isMounted = false;
    };
  }, []);
  return [execute2, __assign({ reset }, result)];
}

// node_modules/@apollo/client/react/hooks/useSubscription.js
var React9 = __toESM(require_react(), 1);
function useSubscription(subscription, options) {
  var hasIssuedDeprecationWarningRef = React9.useRef(false);
  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);
  verifyDocumentType(subscription, DocumentType.Subscription);
  var _a = React9.useState({
    loading: !(options === null || options === void 0 ? void 0 : options.skip),
    error: void 0,
    data: void 0,
    variables: options === null || options === void 0 ? void 0 : options.variables
  }), result = _a[0], setResult = _a[1];
  if (!hasIssuedDeprecationWarningRef.current) {
    hasIssuedDeprecationWarningRef.current = true;
    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {
      globalThis.__DEV__ !== false && invariant.warn(options.onData ? 52 : 53);
    }
    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {
      globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 54 : 55);
    }
  }
  var _b = React9.useState(function() {
    if (options === null || options === void 0 ? void 0 : options.skip) {
      return null;
    }
    return client.subscribe({
      query: subscription,
      variables: options === null || options === void 0 ? void 0 : options.variables,
      fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
      context: options === null || options === void 0 ? void 0 : options.context
    });
  }), observable = _b[0], setObservable = _b[1];
  var canResetObservableRef = React9.useRef(false);
  React9.useEffect(function() {
    return function() {
      canResetObservableRef.current = true;
    };
  }, []);
  var ref = React9.useRef({ client, subscription, options });
  React9.useEffect(function() {
    var _a2, _b2, _c, _d;
    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;
    if (typeof shouldResubscribe === "function") {
      shouldResubscribe = !!shouldResubscribe(options);
    }
    if (options === null || options === void 0 ? void 0 : options.skip) {
      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a2 = ref.current.options) === null || _a2 === void 0 ? void 0 : _a2.skip) || canResetObservableRef.current) {
        setResult({
          loading: false,
          data: void 0,
          error: void 0,
          variables: options === null || options === void 0 ? void 0 : options.variables
        });
        setObservable(null);
        canResetObservableRef.current = false;
      }
    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b2 = ref.current.options) === null || _b2 === void 0 ? void 0 : _b2.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {
      setResult({
        loading: true,
        data: void 0,
        error: void 0,
        variables: options === null || options === void 0 ? void 0 : options.variables
      });
      setObservable(client.subscribe({
        query: subscription,
        variables: options === null || options === void 0 ? void 0 : options.variables,
        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
        context: options === null || options === void 0 ? void 0 : options.context
      }));
      canResetObservableRef.current = false;
    }
    Object.assign(ref.current, { client, subscription, options });
  }, [client, subscription, options, canResetObservableRef.current]);
  React9.useEffect(function() {
    if (!observable) {
      return;
    }
    var subscriptionStopped = false;
    var subscription2 = observable.subscribe({
      next: function(fetchResult) {
        var _a2, _b2;
        if (subscriptionStopped) {
          return;
        }
        var result2 = {
          loading: false,
          data: fetchResult.data,
          error: void 0,
          variables: options === null || options === void 0 ? void 0 : options.variables
        };
        setResult(result2);
        if ((_a2 = ref.current.options) === null || _a2 === void 0 ? void 0 : _a2.onData) {
          ref.current.options.onData({
            client,
            data: result2
          });
        } else if ((_b2 = ref.current.options) === null || _b2 === void 0 ? void 0 : _b2.onSubscriptionData) {
          ref.current.options.onSubscriptionData({
            client,
            subscriptionData: result2
          });
        }
      },
      error: function(error) {
        var _a2, _b2;
        if (!subscriptionStopped) {
          setResult({
            loading: false,
            data: void 0,
            error,
            variables: options === null || options === void 0 ? void 0 : options.variables
          });
          (_b2 = (_a2 = ref.current.options) === null || _a2 === void 0 ? void 0 : _a2.onError) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, error);
        }
      },
      complete: function() {
        var _a2, _b2;
        if (!subscriptionStopped) {
          if ((_a2 = ref.current.options) === null || _a2 === void 0 ? void 0 : _a2.onComplete) {
            ref.current.options.onComplete();
          } else if ((_b2 = ref.current.options) === null || _b2 === void 0 ? void 0 : _b2.onSubscriptionComplete) {
            ref.current.options.onSubscriptionComplete();
          }
        }
      }
    });
    return function() {
      subscriptionStopped = true;
      setTimeout(function() {
        subscription2.unsubscribe();
      });
    };
  }, [observable]);
  return result;
}

// node_modules/@apollo/client/react/hooks/useReactiveVar.js
var React10 = __toESM(require_react(), 1);
function useReactiveVar(rv) {
  return useSyncExternalStore(React10.useCallback(function(update) {
    return rv.onNextChange(function onNext() {
      update();
      rv.onNextChange(onNext);
    });
  }, [rv]), rv, rv);
}

// node_modules/@apollo/client/react/hooks/useFragment.js
var React11 = __toESM(require_react(), 1);
function useFragment(options) {
  var cache2 = useApolloClient().cache;
  var fragment = options.fragment, fragmentName = options.fragmentName, from2 = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, rest = __rest(options, ["fragment", "fragmentName", "from", "optimistic"]);
  var diffOptions = __assign(__assign({}, rest), { returnPartialData: true, id: typeof from2 === "string" ? from2 : cache2.identify(from2), query: cache2["getFragmentDoc"](fragment, fragmentName), optimistic });
  var resultRef = React11.useRef();
  var latestDiff = cache2.diff(diffOptions);
  var getSnapshot = function() {
    var latestDiffToResult = diffToResult(latestDiff);
    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;
  };
  return useSyncExternalStore(function(forceUpdate) {
    var lastTimeout = 0;
    var unsubcribe = cache2.watch(__assign(__assign({}, diffOptions), { immediate: true, callback: function(diff) {
      if (!equal(diff, latestDiff)) {
        resultRef.current = diffToResult(latestDiff = diff);
        lastTimeout = setTimeout(forceUpdate);
      }
    } }));
    return function() {
      unsubcribe();
      clearTimeout(lastTimeout);
    };
  }, getSnapshot, getSnapshot);
}
function diffToResult(diff) {
  var result = {
    data: diff.result,
    complete: !!diff.complete
  };
  if (diff.missing) {
    result.missing = mergeDeepArray(diff.missing.map(function(error) {
      return error.missing;
    }));
  }
  return result;
}

// node_modules/@apollo/client/react/hooks/useSuspenseQuery.js
var React15 = __toESM(require_react(), 1);

// node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js
var React12 = __toESM(require_react(), 1);
function useDeepMemo(memoFn, deps) {
  var ref = React12.useRef();
  if (!ref.current || !equal(ref.current.deps, deps)) {
    ref.current = { value: memoFn(), deps };
  }
  return ref.current.value;
}

// node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js
var React13 = __toESM(require_react(), 1);

// node_modules/@apollo/client/react/hooks/internal/__use.js
var React14 = __toESM(require_react(), 1);
var useKey = "use";
var realHook2 = React14[useKey];
var __use = realHook2 || function __use2(promise) {
  var statefulPromise = wrapPromiseWithState(promise);
  switch (statefulPromise.status) {
    case "pending":
      throw statefulPromise;
    case "rejected":
      throw statefulPromise.reason;
    case "fulfilled":
      return statefulPromise.value;
  }
};

// node_modules/@apollo/client/react/cache/QueryReference.js
var QUERY_REFERENCE_SYMBOL = Symbol();
function wrapQueryRef(internalQueryRef) {
  var _a;
  return _a = {}, _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef, _a;
}
function unwrapQueryRef(queryRef) {
  return queryRef[QUERY_REFERENCE_SYMBOL];
}
var OBSERVED_CHANGED_OPTIONS = [
  "canonizeResults",
  "context",
  "errorPolicy",
  "fetchPolicy",
  "refetchWritePolicy",
  "returnPartialData"
];
var InternalQueryReference = function() {
  function InternalQueryReference2(observable, options) {
    var _this = this;
    this.listeners = /* @__PURE__ */ new Set();
    this.status = "loading";
    this.references = 0;
    this.handleNext = this.handleNext.bind(this);
    this.handleError = this.handleError.bind(this);
    this.dispose = this.dispose.bind(this);
    this.observable = observable;
    this.result = observable.getCurrentResult(false);
    this.key = options.key;
    if (options.onDispose) {
      this.onDispose = options.onDispose;
    }
    if (isNetworkRequestSettled(this.result.networkStatus) || this.result.data && (!this.result.partial || this.watchQueryOptions.returnPartialData)) {
      this.promise = createFulfilledPromise(this.result);
      this.status = "idle";
    } else {
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
    }
    this.subscription = observable.filter(function(_a) {
      var data = _a.data;
      return !equal(data, {});
    }).subscribe({
      next: this.handleNext,
      error: this.handleError
    });
    var startDisposeTimer = function() {
      var _a;
      if (!_this.references) {
        _this.autoDisposeTimeoutId = setTimeout(_this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 3e4);
      }
    };
    this.promise.then(startDisposeTimer, startDisposeTimer);
  }
  Object.defineProperty(InternalQueryReference2.prototype, "watchQueryOptions", {
    get: function() {
      return this.observable.options;
    },
    enumerable: false,
    configurable: true
  });
  InternalQueryReference2.prototype.retain = function() {
    var _this = this;
    this.references++;
    clearTimeout(this.autoDisposeTimeoutId);
    var disposed = false;
    return function() {
      if (disposed) {
        return;
      }
      disposed = true;
      _this.references--;
      setTimeout(function() {
        if (!_this.references) {
          _this.dispose();
        }
      });
    };
  };
  InternalQueryReference2.prototype.didChangeOptions = function(watchQueryOptions) {
    var _this = this;
    return OBSERVED_CHANGED_OPTIONS.some(function(option) {
      return !equal(_this.watchQueryOptions[option], watchQueryOptions[option]);
    });
  };
  InternalQueryReference2.prototype.applyOptions = function(watchQueryOptions) {
    var _a = this.watchQueryOptions, currentFetchPolicy = _a.fetchPolicy, currentCanonizeResults = _a.canonizeResults;
    if (currentFetchPolicy === "standby" && currentFetchPolicy !== watchQueryOptions.fetchPolicy) {
      this.initiateFetch(this.observable.reobserve(watchQueryOptions));
    } else {
      this.observable.silentSetOptions(watchQueryOptions);
      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {
        this.result = __assign(__assign({}, this.result), this.observable.getCurrentResult());
        this.promise = createFulfilledPromise(this.result);
      }
    }
    return this.promise;
  };
  InternalQueryReference2.prototype.listen = function(listener) {
    var _this = this;
    this.listeners.add(listener);
    return function() {
      _this.listeners.delete(listener);
    };
  };
  InternalQueryReference2.prototype.refetch = function(variables) {
    return this.initiateFetch(this.observable.refetch(variables));
  };
  InternalQueryReference2.prototype.fetchMore = function(options) {
    return this.initiateFetch(this.observable.fetchMore(options));
  };
  InternalQueryReference2.prototype.dispose = function() {
    this.subscription.unsubscribe();
    this.onDispose();
  };
  InternalQueryReference2.prototype.onDispose = function() {
  };
  InternalQueryReference2.prototype.handleNext = function(result) {
    var _a;
    switch (this.status) {
      case "loading": {
        if (result.data === void 0) {
          result.data = this.result.data;
        }
        this.status = "idle";
        this.result = result;
        (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);
        break;
      }
      case "idle": {
        if (result.data === this.result.data) {
          return;
        }
        if (result.data === void 0) {
          result.data = this.result.data;
        }
        this.result = result;
        this.promise = createFulfilledPromise(result);
        this.deliver(this.promise);
        break;
      }
    }
  };
  InternalQueryReference2.prototype.handleError = function(error) {
    var _a;
    this.subscription.unsubscribe();
    this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);
    switch (this.status) {
      case "loading": {
        this.status = "idle";
        (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);
        break;
      }
      case "idle": {
        this.promise = createRejectedPromise(error);
        this.deliver(this.promise);
      }
    }
  };
  InternalQueryReference2.prototype.deliver = function(promise) {
    this.listeners.forEach(function(listener) {
      return listener(promise);
    });
  };
  InternalQueryReference2.prototype.initiateFetch = function(returnedPromise) {
    var _this = this;
    this.status = "loading";
    this.promise = new Promise(function(resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
    this.promise.catch(function() {
    });
    returnedPromise.then(function(result) {
      var _a;
      if (_this.status === "loading") {
        _this.status = "idle";
        _this.result = result;
        (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, result);
      }
    }).catch(function() {
    });
    return returnedPromise;
  };
  return InternalQueryReference2;
}();

// node_modules/@apollo/client/react/cache/SuspenseCache.js
var SuspenseCache = function() {
  function SuspenseCache2(options) {
    if (options === void 0) {
      options = /* @__PURE__ */ Object.create(null);
    }
    this.queryRefs = new Trie(canUseWeakMap);
    this.options = options;
  }
  SuspenseCache2.prototype.getQueryRef = function(cacheKey, createObservable) {
    var ref = this.queryRefs.lookupArray(cacheKey);
    if (!ref.current) {
      ref.current = new InternalQueryReference(createObservable(), {
        key: cacheKey,
        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,
        onDispose: function() {
          delete ref.current;
        }
      });
    }
    return ref.current;
  };
  return SuspenseCache2;
}();

// node_modules/@apollo/client/react/cache/getSuspenseCache.js
var suspenseCacheSymbol = Symbol.for("apollo.suspenseCache");
function getSuspenseCache(client) {
  var _a;
  if (!client[suspenseCacheSymbol]) {
    client[suspenseCacheSymbol] = new SuspenseCache((_a = client.defaultOptions.react) === null || _a === void 0 ? void 0 : _a.suspense);
  }
  return client[suspenseCacheSymbol];
}

// node_modules/@apollo/client/react/hooks/constants.js
var skipToken = Symbol.for("apollo.skipToken");

// node_modules/@apollo/client/react/hooks/useSuspenseQuery.js
function useSuspenseQuery(query, options) {
  if (options === void 0) {
    options = /* @__PURE__ */ Object.create(null);
  }
  var client = useApolloClient(options.client);
  var suspenseCache = getSuspenseCache(client);
  var watchQueryOptions = useWatchQueryOptions({ client, query, options });
  var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;
  var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;
  var cacheKey = __spreadArray([
    query,
    canonicalStringify(variables)
  ], [].concat(queryKey), true);
  var queryRef = suspenseCache.getQueryRef(cacheKey, function() {
    return client.watchQuery(watchQueryOptions);
  });
  var _b = React15.useState(function() {
    return /* @__PURE__ */ new Map([[queryRef.key, queryRef.promise]]);
  }), promiseCache = _b[0], setPromiseCache = _b[1];
  var promise = promiseCache.get(queryRef.key);
  if (queryRef.didChangeOptions(watchQueryOptions)) {
    promise = queryRef.applyOptions(watchQueryOptions);
    promiseCache.set(queryRef.key, promise);
  }
  if (!promise) {
    promise = queryRef.promise;
    promiseCache.set(queryRef.key, promise);
  }
  React15.useEffect(function() {
    var dispose = queryRef.retain();
    var removeListener = queryRef.listen(function(promise2) {
      setPromiseCache(function(promiseCache2) {
        return new Map(promiseCache2).set(queryRef.key, promise2);
      });
    });
    return function() {
      removeListener();
      dispose();
    };
  }, [queryRef]);
  var skipResult = React15.useMemo(function() {
    var error = toApolloError(queryRef.result);
    return {
      loading: false,
      data: queryRef.result.data,
      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,
      error
    };
  }, [queryRef.result]);
  var result = fetchPolicy === "standby" ? skipResult : __use(promise);
  var fetchMore = React15.useCallback(function(options2) {
    var promise2 = queryRef.fetchMore(options2);
    setPromiseCache(function(previousPromiseCache) {
      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);
    });
    return promise2;
  }, [queryRef]);
  var refetch = React15.useCallback(function(variables2) {
    var promise2 = queryRef.refetch(variables2);
    setPromiseCache(function(previousPromiseCache) {
      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);
    });
    return promise2;
  }, [queryRef]);
  var subscribeToMore = React15.useCallback(function(options2) {
    return queryRef.observable.subscribeToMore(options2);
  }, [queryRef]);
  return React15.useMemo(function() {
    return {
      client,
      data: result.data,
      error: toApolloError(result),
      networkStatus: result.networkStatus,
      fetchMore,
      refetch,
      subscribeToMore
    };
  }, [client, fetchMore, refetch, result, subscribeToMore]);
}
function validateOptions(options) {
  var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;
  verifyDocumentType(query, DocumentType.Query);
  validateFetchPolicy(fetchPolicy);
  validatePartialDataReturn(fetchPolicy, returnPartialData);
}
function validateFetchPolicy(fetchPolicy) {
  if (fetchPolicy === void 0) {
    fetchPolicy = "cache-first";
  }
  var supportedFetchPolicies = [
    "cache-first",
    "network-only",
    "no-cache",
    "cache-and-network"
  ];
  invariant(supportedFetchPolicies.includes(fetchPolicy), 56, fetchPolicy);
}
function validatePartialDataReturn(fetchPolicy, returnPartialData) {
  if (fetchPolicy === "no-cache" && returnPartialData) {
    globalThis.__DEV__ !== false && invariant.warn(57);
  }
}
function toApolloError(result) {
  return isNonEmptyArray(result.errors) ? new ApolloError({ graphQLErrors: result.errors }) : result.error;
}
function useWatchQueryOptions(_a) {
  var client = _a.client, query = _a.query, options = _a.options;
  return useDeepMemo(function() {
    var _a2;
    if (options === skipToken) {
      return { query, fetchPolicy: "standby" };
    }
    var fetchPolicy = options.fetchPolicy || ((_a2 = client.defaultOptions.watchQuery) === null || _a2 === void 0 ? void 0 : _a2.fetchPolicy) || "cache-first";
    var watchQueryOptions = __assign(__assign({}, options), { fetchPolicy, query, notifyOnNetworkStatusChange: false, nextFetchPolicy: void 0 });
    if (globalThis.__DEV__ !== false) {
      validateOptions(watchQueryOptions);
    }
    if (options.skip) {
      watchQueryOptions.fetchPolicy = "standby";
    }
    return watchQueryOptions;
  }, [client, options, query]);
}

// node_modules/@apollo/client/react/hooks/useBackgroundQuery.js
var React16 = __toESM(require_react(), 1);
function useBackgroundQuery(query, options) {
  if (options === void 0) {
    options = /* @__PURE__ */ Object.create(null);
  }
  var client = useApolloClient(options.client);
  var suspenseCache = getSuspenseCache(client);
  var watchQueryOptions = useWatchQueryOptions({ client, query, options });
  var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;
  var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;
  var didFetchResult = React16.useRef(fetchPolicy !== "standby");
  didFetchResult.current || (didFetchResult.current = fetchPolicy !== "standby");
  var cacheKey = __spreadArray([
    query,
    canonicalStringify(variables)
  ], [].concat(queryKey), true);
  var queryRef = suspenseCache.getQueryRef(cacheKey, function() {
    return client.watchQuery(watchQueryOptions);
  });
  var _b = React16.useState(function() {
    return /* @__PURE__ */ new Map([[queryRef.key, queryRef.promise]]);
  }), promiseCache = _b[0], setPromiseCache = _b[1];
  if (queryRef.didChangeOptions(watchQueryOptions)) {
    var promise = queryRef.applyOptions(watchQueryOptions);
    promiseCache.set(queryRef.key, promise);
  }
  React16.useEffect(function() {
    return queryRef.retain();
  }, [queryRef]);
  var fetchMore = React16.useCallback(function(options2) {
    var promise2 = queryRef.fetchMore(options2);
    setPromiseCache(function(promiseCache2) {
      return new Map(promiseCache2).set(queryRef.key, queryRef.promise);
    });
    return promise2;
  }, [queryRef]);
  var refetch = React16.useCallback(function(variables2) {
    var promise2 = queryRef.refetch(variables2);
    setPromiseCache(function(promiseCache2) {
      return new Map(promiseCache2).set(queryRef.key, queryRef.promise);
    });
    return promise2;
  }, [queryRef]);
  queryRef.promiseCache = promiseCache;
  var wrappedQueryRef = React16.useMemo(function() {
    return wrapQueryRef(queryRef);
  }, [queryRef]);
  return [
    didFetchResult.current ? wrappedQueryRef : void 0,
    { fetchMore, refetch }
  ];
}

// node_modules/@apollo/client/react/hooks/useReadQuery.js
var React17 = __toESM(require_react(), 1);
function useReadQuery(queryRef) {
  var internalQueryRef = unwrapQueryRef(queryRef);
  invariant(internalQueryRef.promiseCache, 51);
  var promiseCache = internalQueryRef.promiseCache, key = internalQueryRef.key;
  if (!promiseCache.has(key)) {
    promiseCache.set(key, internalQueryRef.promise);
  }
  var promise = useSyncExternalStore(React17.useCallback(function(forceUpdate) {
    return internalQueryRef.listen(function(promise2) {
      internalQueryRef.promiseCache.set(internalQueryRef.key, promise2);
      forceUpdate();
    });
  }, [internalQueryRef]), function() {
    return promiseCache.get(key);
  }, function() {
    return promiseCache.get(key);
  });
  var result = __use(promise);
  return React17.useMemo(function() {
    return {
      data: result.data,
      networkStatus: result.networkStatus,
      error: toApolloError(result)
    };
  }, [result]);
}
export {
  ApolloCache,
  ApolloClient,
  ApolloConsumer,
  ApolloError,
  ApolloLink,
  ApolloProvider,
  Cache,
  DocumentTransform,
  DocumentType,
  HttpLink,
  InMemoryCache,
  MissingFieldError,
  NetworkStatus,
  Observable,
  ObservableQuery,
  checkFetcher,
  concat,
  createHttpLink,
  createSignalIfSupported,
  defaultDataIdFromObject,
  defaultPrinter,
  disableExperimentalFragmentVariables,
  disableFragmentWarnings,
  empty,
  enableExperimentalFragmentVariables,
  execute,
  fallbackHttpConfig,
  from,
  fromError,
  fromPromise,
  getApolloContext,
  gql,
  isApolloError,
  isNetworkRequestSettled,
  isReference,
  makeReference,
  makeVar,
  mergeOptions,
  operationName,
  parseAndCheckHttpResponse,
  parser,
  resetApolloContext,
  resetCaches,
  rewriteURIForGET,
  selectHttpOptionsAndBody,
  selectHttpOptionsAndBodyInternal,
  selectURI,
  serializeFetchParameter,
  setVerbosity as setLogVerbosity,
  skipToken,
  split,
  throwServerError,
  toPromise,
  useApolloClient,
  useBackgroundQuery,
  useFragment,
  useLazyQuery,
  useMutation,
  useQuery,
  useReactiveVar,
  useReadQuery,
  useSubscription,
  useSuspenseQuery
};
//# sourceMappingURL=@apollo_client.js.map
